diff --git a/common.gypi b/common.gypi
index 592c4e92..c545c50e 100644
--- a/common.gypi
+++ b/common.gypi
@@ -187,9 +187,9 @@
               'MSVC_runtimeType': 2   # MultiThreadedDLL (/MD)
             }],
             ['clang==1', {
-              'lto': ' -flto ', # Clang
+              'lto': ' -flto=thin ', # Clang
             }, {
-              'lto': ' -flto=4 -fuse-linker-plugin -ffat-lto-objects ', # GCC
+              'lto': ' -flto=auto -fuse-linker-plugin -fno-fat-lto-objects ', # GCC
             }],
           ],
         },
diff --git a/deps/cares/configure b/deps/cares/configure
index 7a29494d..dbb46253 100755
--- a/deps/cares/configure
+++ b/deps/cares/configure
@@ -16275,11 +16275,6 @@ _LT_EOF
 
 
 _lt_libdeps_save_CFLAGS=$CFLAGS
-case "$CC $CFLAGS " in #(
-*\ -flto*\ *) CFLAGS="$CFLAGS -fno-lto" ;;
-*\ -fwhopr*\ *) CFLAGS="$CFLAGS -fno-whopr" ;;
-*\ -fuse-linker-plugin*\ *) CFLAGS="$CFLAGS -fno-use-linker-plugin" ;;
-esac
 
 if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
   (eval $ac_compile) 2>&5
diff --git a/deps/cares/m4/libtool.m4 b/deps/cares/m4/libtool.m4
index e7b68334..13ec17a6 100755
--- a/deps/cares/m4/libtool.m4
+++ b/deps/cares/m4/libtool.m4
@@ -7562,11 +7562,6 @@ _LT_EOF
 ])
 
 _lt_libdeps_save_CFLAGS=$CFLAGS
-case "$CC $CFLAGS " in #(
-*\ -flto*\ *) CFLAGS="$CFLAGS -fno-lto" ;;
-*\ -fwhopr*\ *) CFLAGS="$CFLAGS -fno-whopr" ;;
-*\ -fuse-linker-plugin*\ *) CFLAGS="$CFLAGS -fno-use-linker-plugin" ;;
-esac
 
 dnl Parse the compiler output and extract the necessary
 dnl objects, libraries and library flags.
diff --git a/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py b/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py
index 192a5235..421076fb 100644
--- a/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py
+++ b/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py
@@ -635,7 +635,7 @@ class XcodeSettings:
         # if the system clang isn't used, DYLD_LIBRARY_PATH needs to contain the
         # path to the libLTO.dylib that matches the used clang.
         if self._Test("LLVM_LTO", "YES", default="NO"):
-            cflags.append("-flto")
+            cflags.append("-flto=thin")
 
         self._AppendPlatformVersionMinFlags(cflags)
 
@@ -1097,7 +1097,7 @@ class XcodeSettings:
         # For static libraries, no dSYMs are created.
         result = []
         if (
-            self._Test("GCC_GENERATE_DEBUGGING_SYMBOLS", "YES", default="YES")
+            self._Test("GCC_GENERATE_DEBUGGING_SYMBOLS", "YES", default="NO")
             and self._Test(
                 "DEBUG_INFORMATION_FORMAT", "dwarf-with-dsym", default="dwarf"
             )
diff --git a/deps/openssl/openssl-cli.gypi b/deps/openssl/openssl-cli.gypi
index ae74be9a..4e8517e5 100644
--- a/deps/openssl/openssl-cli.gypi
+++ b/deps/openssl/openssl-cli.gypi
@@ -23,7 +23,7 @@
     }],
     # Avoid excessive LTO
     ['enable_lto=="true"', {
-      'ldflags': [ '-fno-lto' ],
+      'ldflags': [],
     }],
   ],
 }
diff --git a/deps/openssl/openssl.gyp b/deps/openssl/openssl.gyp
index ea3a2dc0..ea3780f7 100644
--- a/deps/openssl/openssl.gyp
+++ b/deps/openssl/openssl.gyp
@@ -75,7 +75,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
      ]
     }, {
diff --git a/node.gyp b/node.gyp
index e22dce67..e30d9a5b 100644
--- a/node.gyp
+++ b/node.gyp
@@ -1082,7 +1082,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     }, # fuzz_env
@@ -1127,7 +1127,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     }, # fuzz_ClientHelloParser.cc
@@ -1174,7 +1174,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     }, # fuzz_strings
@@ -1262,7 +1262,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     }, # cctest
@@ -1318,7 +1318,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     }, # embedtest
@@ -1340,7 +1340,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ]
     }, # overlapped-checker
@@ -1453,7 +1453,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     }, # node_mksnapshot
diff --git a/tools/gyp/pylib/gyp/xcode_emulation.py b/tools/gyp/pylib/gyp/xcode_emulation.py
index 192a5235..421076fb 100644
--- a/tools/gyp/pylib/gyp/xcode_emulation.py
+++ b/tools/gyp/pylib/gyp/xcode_emulation.py
@@ -635,7 +635,7 @@ class XcodeSettings:
         # if the system clang isn't used, DYLD_LIBRARY_PATH needs to contain the
         # path to the libLTO.dylib that matches the used clang.
         if self._Test("LLVM_LTO", "YES", default="NO"):
-            cflags.append("-flto")
+            cflags.append("-flto=thin")
 
         self._AppendPlatformVersionMinFlags(cflags)
 
@@ -1097,7 +1097,7 @@ class XcodeSettings:
         # For static libraries, no dSYMs are created.
         result = []
         if (
-            self._Test("GCC_GENERATE_DEBUGGING_SYMBOLS", "YES", default="YES")
+            self._Test("GCC_GENERATE_DEBUGGING_SYMBOLS", "YES", default="NO")
             and self._Test(
                 "DEBUG_INFORMATION_FORMAT", "dwarf-with-dsym", default="dwarf"
             )
diff --git a/tools/icu/icu-generic.gyp b/tools/icu/icu-generic.gyp
index f007c652..ac69a873 100644
--- a/tools/icu/icu-generic.gyp
+++ b/tools/icu/icu-generic.gyp
@@ -454,7 +454,7 @@
       'conditions': [
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     },
@@ -471,7 +471,7 @@
       'conditions': [
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     },
@@ -489,7 +489,7 @@
       'conditions': [
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     },
@@ -506,7 +506,7 @@
       'conditions': [
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     },
diff --git a/tools/v8_gypfiles/d8.gyp b/tools/v8_gypfiles/d8.gyp
index f5f8a194..d2a6306e 100644
--- a/tools/v8_gypfiles/d8.gyp
+++ b/tools/v8_gypfiles/d8.gyp
@@ -65,7 +65,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     },
diff --git a/tools/v8_gypfiles/v8.gyp b/tools/v8_gypfiles/v8.gyp
index 2d5e78b3..81d6e5cf 100644
--- a/tools/v8_gypfiles/v8.gyp
+++ b/tools/v8_gypfiles/v8.gyp
@@ -1735,7 +1735,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
       'defines!': [
@@ -1797,7 +1797,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
     },  # mksnapshot
@@ -1815,7 +1815,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
       'defines!': [
@@ -1853,7 +1853,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
       'dependencies': [
@@ -1890,7 +1890,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
       'sources': [
@@ -1910,7 +1910,7 @@
         }],
         # Avoid excessive LTO
         ['enable_lto=="true"', {
-          'ldflags': [ '-fno-lto' ],
+          'ldflags': [],
         }],
       ],
       'actions': [
@@ -1978,7 +1978,7 @@
         ],
         'conditions': [
           ['enable_lto=="true"', {
-            'cflags_cc': [ '-fno-lto' ],
+            'cflags_cc': [],
           }],
           # Changes in push_registers_asm.cc in V8 v12.8 requires using
           # push_registers_masm on Windows even with ClangCL on x64
